1
00:00:00,000 --> 00:00:03,520
Classes in JavaScript, what do you think about them?

2
00:00:03,520 --> 00:00:05,939
I think they're great. I mean they're a bit confusing if

3
00:00:05,940 --> 00:00:08,359
you think about how classes work in other languages,

4
00:00:08,359 --> 00:00:10,349
but the general concept is all the same.

5
00:00:10,349 --> 00:00:12,359
Do you want to elaborate a bit on that?

6
00:00:12,359 --> 00:00:14,219
Well in other languages,

7
00:00:14,220 --> 00:00:17,940
we use classes to create objects and provide inheritance.

8
00:00:17,940 --> 00:00:20,798
But you're saying that JavaScript isn't like that?

9
00:00:20,798 --> 00:00:23,278
Not exactly. In JavaScript,

10
00:00:23,278 --> 00:00:25,410
we use functions to create objects.

11
00:00:25,410 --> 00:00:28,844
So when we create a new dessert like this,

12
00:00:28,844 --> 00:00:31,070
dessert is just a regular function.

13
00:00:31,070 --> 00:00:34,125
Oh, right. And being able to inherit data

14
00:00:34,125 --> 00:00:37,530
and functionality in JavaScript happens through prototypal inheritance.

15
00:00:37,530 --> 00:00:42,359
Exactly. Just because ECMAScript has provided us with new keywords like class,

16
00:00:42,359 --> 00:00:47,320
super, and extends, it doesn't mean the entire way the language works has changed.

17
00:00:47,320 --> 00:00:51,405
So JavaScript still uses functions and prototypal inheritance under the hood.

18
00:00:51,405 --> 00:00:54,630
We just have a new cleaner way to write the same functionality, right?

19
00:00:54,630 --> 00:00:56,925
You got it. But keep in mind,

20
00:00:56,924 --> 00:01:00,265
that the underlying functionality of the language hasn't changed.

21
00:01:00,265 --> 00:01:04,549
Okay. So JavaScript is not a class-based language.

22
00:01:04,549 --> 00:01:09,155
It uses functions to create objects and links objects together by prototypal inheritance.

23
00:01:09,155 --> 00:01:10,920
Yep. JavaScript classes are

24
00:01:10,920 --> 00:01:15,730
just a thin mirage over regular functions and prototypal inheritance.

