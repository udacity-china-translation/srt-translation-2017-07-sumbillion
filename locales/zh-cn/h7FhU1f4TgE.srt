1
00:00:00,000 --> 00:00:03,535
目前为止 你已对文件和目录执行了一堆操作

2
00:00:03,535 --> 00:00:06,080
但是文件最初从何而来的呢？

3
00:00:06,080 --> 00:00:07,625
它们来自网路

4
00:00:07,625 --> 00:00:10,680
有一个 shell 命令用来从网络下载文件

5
00:00:10,680 --> 00:00:12,150
此命令为 curl

6
00:00:12,150 --> 00:00:15,015
代表 C URL

7
00:00:15,015 --> 00:00:17,395
即 see URL（查看网页）

8
00:00:17,395 --> 00:00:20,260
无论是谁命名的 哈哈 的确很有趣

9
00:00:20,260 --> 00:00:22,835
你可以使用 curl 来获取任何网页

10
00:00:22,835 --> 00:00:25,890
但它的作用是向你显示页面的

11
00:00:25,890 --> 00:00:29,330
源代码 这挺酷的 但并非直接有用

12
00:00:29,330 --> 00:00:32,665
比如我们想转至 http://google.com 

13
00:00:32,665 --> 00:00:36,840
它会向我们显示一些 HTML 但实际上会将我们导航到别处

14
00:00:36,840 --> 00:00:38,814
你需要给 curl 添加一个选项

15
00:00:38,814 --> 00:00:41,475
curl -L 表示遵循

16
00:00:41,475 --> 00:00:46,790
重定向 然后我们将看到转至实际 google.com 主页的源代码 

17
00:00:46,790 --> 00:00:48,450
哈！这就好了 这是

18
00:00:48,450 --> 00:00:51,265
到 google.com 主页的压缩 JavaScript 源代码 

19
00:00:51,265 --> 00:00:52,950
它里面的内容有

20
00:00:52,950 --> 00:00:56,255
“I'm Feeling Lucky”和“Google Search”

21
00:00:56,255 --> 00:00:58,230
这跟你在浏览器开发工具中

22
00:00:58,230 --> 00:01:01,230
打开 View Source（查看源代码）时会看到的差不多

23
00:01:01,230 --> 00:01:03,430
所以 这很便于查看网站

24
00:01:03,430 --> 00:01:08,850
但是 curl 非常适合通过 URL 下载文件或页面

25
00:01:08,850 --> 00:01:12,870
要使其写入文件而不是显示给终端

26
00:01:12,870 --> 00:01:15,428
我们使用 -o 选项

27
00:01:15,428 --> 00:01:18,570
我们用 curl-o 后跟

28
00:01:18,570 --> 00:01:22,495
我们想要保存在其之下的文件名称 如 google.html

29
00:01:22,495 --> 00:01:26,385
这实际上是 shell 命令的一个很常见的模式

30
00:01:26,385 --> 00:01:29,340
以命令名称开头 后跟

31
00:01:29,340 --> 00:01:32,574
一些选项 如 -o google.html

32
00:01:32,574 --> 00:01:35,640
及 -L 然后后跟

33
00:01:35,640 --> 00:01:40,095
我们实际想要操作的对象 如 URL

34
00:01:40,095 --> 00:01:45,030
我们运行它 curl 将在下载时显示一些进程消息

35
00:01:45,030 --> 00:01:47,910
完成时 我们会回到 shell 提示符

36
00:01:47,910 --> 00:01:50,250
一个很常见的情况是 如果 Unix 程序运行成功 则

37
00:01:50,250 --> 00:01:53,765
不会显示任何日志或完成消息

38
00:01:53,765 --> 00:01:56,080
但它确实运行成功了

39
00:01:56,080 --> 00:01:59,000
这是它创建的文件 google.html