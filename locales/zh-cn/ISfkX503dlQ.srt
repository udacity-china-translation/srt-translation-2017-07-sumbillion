1
00:00:00,000 --> 00:00:03,520
JavaScript 中的类 你觉得这个概念怎么样

2
00:00:03,520 --> 00:00:05,939
我觉得它们棒极了 如果你在其他编程语言中

3
00:00:05,940 --> 00:00:08,359
学习过类的概念 你可能会觉得有一点迷惑

4
00:00:08,359 --> 00:00:10,349
但是它们的基本理念是一致的

5
00:00:10,349 --> 00:00:12,359
你希望讲得更详细一点么

6
00:00:12,359 --> 00:00:14,219
好的 在其他编程语言中

7
00:00:14,220 --> 00:00:17,940
我们使用类来创建对象和继承关系

8
00:00:17,940 --> 00:00:20,798
但是你会说 JavaScript 不也是一样的么

9
00:00:20,798 --> 00:00:23,278
并不完全一样 在 JavaScript 中

10
00:00:23,278 --> 00:00:25,410
我们使用函数来创建对象

11
00:00:25,410 --> 00:00:28,844
所以当我们像这样创建一个新的 dessert

12
00:00:28,844 --> 00:00:31,070
dessert 是一个常规函数

13
00:00:31,070 --> 00:00:34,125
是的 它可以继承数据

14
00:00:34,125 --> 00:00:37,530
在 JavaScript 中可以通过原型继承实现这个功能

15
00:00:37,530 --> 00:00:42,359
准确的说 是因为 ECMAScript 为我们提供了一些新的关键字 像是 class

16
00:00:42,359 --> 00:00:47,320
super 和 extends 但是这并不意味着整个语言的运作机制发生了变化

17
00:00:47,320 --> 00:00:51,405
所以 JavaScript 内核仍然在使用函数和原型继承

18
00:00:51,405 --> 00:00:54,630
我们只是有了一种更清晰易懂的方式来实现相同的功能 对吧

19
00:00:54,630 --> 00:00:56,925
你已经学会了这一点 但是要保持清醒

20
00:00:56,924 --> 00:01:00,265
语言的基本功能并没有发生改变

21
00:01:00,265 --> 00:01:04,549
所以 JavaScript 并不是一门基于类的语言

22
00:01:04,549 --> 00:01:09,155
它使用函数来创建对象 并通过原型将它们关联在一起

23
00:01:09,155 --> 00:01:10,920
是的 JavaScript 只是给常规函数和原型

24
00:01:10,920 --> 00:01:15,730
披上了一层类的外衣

