1
00:00:00,000 --> 00:00:02,710
符号是 JavaScript 中我们可用的

2
00:00:02,710 --> 00:00:05,929
原始数据类型列表中的最新补充

3
00:00:05,929 --> 00:00:09,294
以前 JavaScript 只有数字、字符串、

4
00:00:09,294 --> 00:00:14,480
布尔、null 和 undefined 作为原始类型的值 现在符号也加入了它们

5
00:00:14,480 --> 00:00:16,750
James 符号是什么？

6
00:00:16,750 --> 00:00:18,984
符号只是一个唯一标识符

7
00:00:18,984 --> 00:00:22,794
最常用于唯一标识对象中的属性

8
00:00:22,795 --> 00:00:26,050
比如 假设这个碗是一个对象

9
00:00:26,050 --> 00:00:27,339
Richard 可以拿一些水果给我吗？

10
00:00:27,339 --> 00:00:29,403
当然

11
00:00:29,403 --> 00:00:32,240
好的 我们将这个苹果、

12
00:00:32,240 --> 00:00:35,125
桔子和香蕉放在这个碗里

13
00:00:35,125 --> 00:00:40,670
记住 这些水果也是对象 但是现在它们是这个碗的属性

14
00:00:40,670 --> 00:00:42,445
接下来是有趣的地方

15
00:00:42,445 --> 00:00:44,944
可以再给我一根香蕉吗？

16
00:00:44,944 --> 00:00:47,060
如果我将这根香蕉加到碗中

17
00:00:47,060 --> 00:00:49,384
可以看到问题所在吗？

18
00:00:49,384 --> 00:00:53,270
Richard 把碗里的香蕉拿一根给我

19
00:00:53,270 --> 00:00:54,750
哪一根？

20
00:00:54,750 --> 00:01:00,268
这就是问题 我需要一种方式来唯一地识别这两根香蕉

21
00:01:00,268 --> 00:01:03,545
在代码中 我可以做的是用 banana1

22
00:01:03,545 --> 00:01:06,969
表示此香蕉 用 banana2 表示此香蕉

23
00:01:06,969 --> 00:01:10,168
那如果我向碗中添加更多香蕉 会怎样？

24
00:01:10,168 --> 00:01:12,795
想必你也看出来了

25
00:01:12,795 --> 00:01:17,000
好在 使用 ES6 中添加的符号 我们便可解决此问题 

