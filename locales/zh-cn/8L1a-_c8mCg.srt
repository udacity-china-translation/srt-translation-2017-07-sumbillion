1
00:00:00,000 --> 00:00:02,759
Promise 是一个有趣的概念 可以用来

2
00:00:02,759 --> 00:00:06,509
解决早前版本的 JavaScript 中一些棘手的问题

3
00:00:06,509 --> 00:00:11,250
使用 JavaScript Promise 是处理异步请求的一种新方法

4
00:00:11,250 --> 00:00:13,154
就像其他大部分 ES6 的更新一样

5
00:00:13,154 --> 00:00:16,379
是对我们过去代码构建方式的一种改良

6
00:00:16,379 --> 00:00:17,824
让我们看一个示例

7
00:00:17,824 --> 00:00:20,809
James 正在耐心等候我的点单

8
00:00:20,809 --> 00:00:22,333
所以 假如我说 嘿

9
00:00:22,333 --> 00:00:23,769
可以给我拿一个圣代冰淇淋吗

10
00:00:23,769 --> 00:00:26,859
最后 我觉得你不会再有其他要求

11
00:00:26,859 --> 00:00:27,609
好的

12
00:00:27,609 --> 00:00:30,375
所以我发出一个请求 然后

13
00:00:30,375 --> 00:00:33,704
他给我返回了一些东西作为响应

14
00:00:33,704 --> 00:00:37,814
但是我需要一直在原地等着他给我拿冰淇淋吗

15
00:00:37,814 --> 00:00:42,772
在他做冰淇淋的时候 我可以回去继续忙别的么

16
00:00:42,773 --> 00:00:45,680
只要当他做好冰淇淋的时候

17
00:00:45,679 --> 00:00:49,515
告诉我一声 让我回到原来离开的地方取冰淇淋就行了

18
00:00:49,515 --> 00:00:51,410
— Richard 圣代好了

19
00:00:51,409 --> 00:00:52,309
— 太棒了

20
00:00:52,310 --> 00:00:54,355
可以帮我加点软糖

21
00:00:54,354 --> 00:00:57,029
焦糖 生奶油 和樱桃吗

22
00:00:57,030 --> 00:00:58,020
— 没问题

23
00:00:58,020 --> 00:01:00,165
— 谢谢

24
00:01:00,164 --> 00:01:01,795
— 现在 我又得回来继续等了

25
00:01:01,795 --> 00:01:03,890
处理一个请求需要来回等待

26
00:01:03,890 --> 00:01:07,015
造成了大量的停机时间

27
00:01:07,015 --> 00:01:10,250
能够在停机时间同时进行其他工作

28
00:01:10,250 --> 00:01:13,930
并且通知我们请求处理完成 就是 Promises 在 JavaScript 中的作用

29
00:01:13,930 --> 00:01:16,395
它处理 "现在做这件事" 然后

30
00:01:16,394 --> 00:01:18,859
在事情完成之后通知我 所以我能回到上次离开的地方接受响应

31
00:01:18,859 --> 00:01:21,019
— 你的圣代好了

32
00:01:21,019 --> 00:01:21,319
— 谢谢

33
00:01:21,319 --> 00:01:24,844
— 棒极了 就是这样

34
00:01:24,844 --> 00:01:28,079
让我们看看如何创建和使用 Promises

